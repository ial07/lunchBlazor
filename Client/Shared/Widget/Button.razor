<button type="@type"
    class="btn @btnClass @LabelColor @(btnBlock?"col-12":"") @(rounded?"btn-rounded":"") @(bold?"fw-bold":"") @(IsBtnIcon?"waves-effect waves-light":"") @(IsBtnIconLabel ?"btn-label":"")"
    @onclick="HandleClick" @attributes="HtmlAttributes" disabled="@loading">
    @if (loading)
    {

        <i class="fa-solid fa-spinner fa-spin-pulse"></i>
    }
    else
    {
        <i
            class="@(IsBtnIcon ? $"{BtnIcon} {(IsBtnIconLabel ? "label-icon" : "")}{(IsBtnIconBlock ? "d-block font-size-16" : "mx-2 font-size-16")}" : "")"></i>
        @Label
    }
</button>

@code {
    [Parameter]
    public string type { get; set; } = "button";
    [Parameter]
    public string Label { get; set; } = "Submit";
    [Parameter]
    public string? LabelColor { get; set; }
    [Parameter]
    public string btnClass { get; set; } = "btn-primary";
    [Parameter]
    public bool btnBlock { get; set; } = false;
    [Parameter]
    public bool rounded { get; set; } = false;
    [Parameter]
    public bool loading { get; set; } = false;
    [Parameter]
    public bool bold { get; set; } = false;
    [Parameter]
    public bool IsBtnIcon { get; set; } = false;
    [Parameter]
    public bool IsBtnIconBlock { get; set; } = false;
    [Parameter]
    public bool IsBtnIconLabel { get; set; } = false;
    [Parameter]
    public string BtnIcon { get; set; } = "bi-plus-square-fill";

    // Define an event callback for the onClick event
    [Parameter]
    public EventCallback<MouseEventArgs> onClick { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object> HtmlAttributes { get; set; }

    private async Task HandleClick(MouseEventArgs e)
    {
        await onClick.InvokeAsync(e);
    }
}
