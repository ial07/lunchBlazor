@inject JurusanPendidikanService JurusanPendidikanService
@inject IModalService modal
@inject SweetAlertService Swal
@inject IJSRuntime JSRuntime

@page "/master-data/jurusan-pendidikan"

<PageTitle>Jurusan Pendidikan</PageTitle>

<!-- start page title -->
<div class="row">
    <div class="col-12">
        <div class="page-title-box d-sm-flex align-items-center
                    justify-content-between">
            <h4 class="mb-sm-0 font-size-24">Jurusan Pendidikan</h4>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-12 mt-4">
        <div class="d-flex justify-content-end">
            <Button type="button" Label="Tambah" bold data-bs-toggle="modal" data-bs-target="#formJurusanPendidikan"
                onClick="HandleAddJurusanPendidikan" />
        </div>
        <div>
            <Table table=@table HandleClickPrevious=" Previous" HandleClickNext="Next"
                HandlePageSizeChange="HandlePageSizeChange" mySieveModel="mySieveModel"
                totalCountData="JurusanPendidikanService.JurusanPendidikans.totalCountData"
                HandleEditBtn="HandleEditBtnJurusanPendidikan" IsModalEdit modalEditNameId="formJurusanPendidikan"
                HandleDeleteBtn="HandleDeleteJurusanPendidikan" />
        </div>
    </div>
</div>

<Form_jurusan_pendidikan Id="@ApplicationState.Id" formData="@formData" OnFormSubmit="HandleFormSubmission" />

@code {

    private JurusanPendidikan formData = new JurusanPendidikan();
    private async void HandleEditBtnJurusanPendidikan(string id)
    {
        ApplicationState.Id = id;
        if (ApplicationState.Id is not null)
        {
            mySieveModel.Filters = $"Id=={ApplicationState.Id}";
            await JurusanPendidikanService.GetJurusanPendidikanById(mySieveModel);
            formData = JurusanPendidikanService.JurusanPendidikan;
        }
        StateHasChanged();
    }

    private void HandleAddJurusanPendidikan()
    {
        ApplicationState.Id = null;
        formData = new JurusanPendidikan();
        StateHasChanged();
    }

    [CascadingParameter]
    public AppState ApplicationState { get; set; }
    private SieveModel mySieveModel = new SieveModel
        {
            Page = 1,
            PageSize = 5,
        };
    private TableModelViewModel table = new TableModelViewModel();
    private List<JurusanPendidikan> JurusanPendidikanItems = new List<JurusanPendidikan>();


    private async Task HandleFormSubmission(JurusanPendidikan formData)
    {
        mySieveModel.Filters = "";
        if (ApplicationState.Id is null)
        {
            var result = await JurusanPendidikanService.CreateJurusanPendidikan(formData);
            if (result.ReasonPhrase == "OK")
            {
                JSRuntime.InvokeVoidAsync("clickElementById", "closeButtonJurusanPendidikan");
                //await LoadJurusanPendidikan(mySieveModel);
            }
        }
        else
        {
            var result = await JurusanPendidikanService.UpdateJurusanPendidikan(ApplicationState.Id, formData);
            if (result.ReasonPhrase == "OK")
            {
                JSRuntime.InvokeVoidAsync("clickElementById", "closeButtonJurusanPendidikan");
            }
        }
        await LoadJurusanPendidikan(mySieveModel);
        StateHasChanged();
    }

    private async void HandleDeleteJurusanPendidikan(string id)
    {
        Console.WriteLine($"Deletteee option clicked for item with value: {id}");
        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Are you sure to delete this item?",
                ShowCancelButton = true,
                ConfirmButtonText = "Yes!",
                Icon = "warning",
            });
        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            await JurusanPendidikanService.DeleteJurusanPendidikan(id);
            await LoadJurusanPendidikan(mySieveModel);
            StateHasChanged();
        }
    }

    private async Task Next()
    {
        mySieveModel.Page++; // Increment the page
        await LoadJurusanPendidikan(mySieveModel); // Call LoadJurusanPendidikan with the updated page
    }
    private async Task Previous()
    {
        mySieveModel.Page--;
        await LoadJurusanPendidikan(mySieveModel);
    }

    private async Task HandlePageSizeChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int selectedPageSize))
        {
            mySieveModel.Page = 1;
            mySieveModel.PageSize = selectedPageSize;
            await LoadJurusanPendidikan(mySieveModel);
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadJurusanPendidikan(mySieveModel);
    }


    private async Task LoadJurusanPendidikan(SieveModel sieveModel)
    {
        try
        {
            await JurusanPendidikanService.LoadJurusanPendidikan(sieveModel);

            JurusanPendidikanItems = JurusanPendidikanService.JurusanPendidikans.Items;

            table.Data = new List<List<object>>();

            foreach (var item in JurusanPendidikanItems)
            {
                var rowData = new List<object>
{
item.Id.ToString(),
item.Id.ToString(),
item.Name,
};

                table.Data.Add(rowData);
            }

            table.Headers = new List<string>
{
"ID",
"Name"
};
        }
        catch (Exception ex)
        {
            // Log the exception
            Console.WriteLine(ex);
            // Handle the exception as needed (e.g., show an error message to the user)
        }
        finally
        {
        }
    }

}
