@inject JenisPermintaanService JenisPermintaanService
@inject SumberPemenuhanService SumberPemenuhanService

<div class="row">
    <div class="col-12">
        <div class="fw-bold">
            Detail Status Pemenuhan
        </div>
        <div class="border-title"></div>
    </div>
    <div class="col-12 mt-3">
        @if (isJenisPermintaanLoaded)
        {
            <SelectComponent label="Jenis Permintaan" isBold listItems="listItemsJenisPermintaan"
                 placeholder="Pilih Jenis Permintaan..." name="jenispermintaan" OnChanged="HandleInputChanged" />
        }
        else
        {
            <p>Loading...</p>
        }
    </div>
    <div class="col-12">
        @if (isSumberPemenuhanLoaded)
        {
            <SelectComponent label="Sumber Pemenuhan" isBold listItems="listItemsSumberPemenuhan"
                 placeholder="Pilih Sumber Pemenuhan..." name="sumberpemenuhan" OnChanged="HandleInputChanged" />
        }
        else
        {
            <p>Loading...</p>
        }
    </div>

    <div class="col-12">
        <TextArea label="Detail Sumber Pemenuhan" optional bold name="detailsumberpemenuhan"
             OnInput="HandleInputChanged" />
     </div>
     <div class="d-flex justify-content-between mt-3">
         <Button Label="Sebelumnya" btnClass="btn-outline-danger" type="button" onClick="onPrevPemenuhan" />
         <Button Label="Selanjutnya" btnClass="btn-outline-info" type="button" onClick="onNextPemenuhan" />
     </div>
 </div>

 @code {
    [Parameter]
    public EventCallback<MouseEventArgs> onPrevPemenuhan { get; set; }
    [Parameter]
    public EventCallback<MouseEventArgs> onNextPemenuhan { get; set; }
    [CascadingParameter]
    public AppState ApplicationState { get; set; }
    private async Task HandleInputChanged(SelectChangedEventArgs args)
    {
        string inputName = args.Name;
        string inputValue = args.Value;


        if (inputName == "jenispermintaan")
        {
            ApplicationState.MppChildForm.JenisPermintaanId = new Guid(inputValue);
        }
        else if (inputName == "sumberpemenuhan")
        {
            ApplicationState.MppChildForm.SumberPemenuhanId = new Guid(inputValue);
        }
        else if (inputName == "detailsumberpemenuhan")
        {
            ApplicationState.MppChildForm.DetailSumberPemenuhan = inputValue;
        }
    }

    private async Task HandleTextareaInput(ChangeEventArgs e)
    {
        ApplicationState.MppChildForm.DetailSumberPemenuhan = e.Value?.ToString();
    }
    private SieveModel mySieveModel = new SieveModel
        {
            Page = 1,
            PageSize = 5,
        };

    /// Jenis Permintaan
    private List<JenisPermintaan> jenisPermintaanList;
    private List<dynamic> listItemsJenisPermintaan;
    private bool isJenisPermintaanLoaded = false;

    /// Sumber Pemenuhan
    private List<SumberPemenuhan> sumberPemenuhanList;
    private List<dynamic> listItemsSumberPemenuhan;
    private bool isSumberPemenuhanLoaded = false;


    protected async override Task OnInitializedAsync()
    {
        await LoadJenisPermintaanAsync();
        await LoadSumberPemenuhanAsync();
    }

    private async Task LoadJenisPermintaanAsync()
    {
        await JenisPermintaanService.LoadJenisPermintaan(mySieveModel);

        jenisPermintaanList = JenisPermintaanService.JenisPermintaans.Items;

        listItemsJenisPermintaan = jenisPermintaanList
        .Select(x => (dynamic)new { Id = x.Id, Value = x.Name })
        .ToList();

        isJenisPermintaanLoaded = true;

        StateHasChanged();
    }
    private async Task LoadSumberPemenuhanAsync()
    {
        await SumberPemenuhanService.LoadSumberPemenuhan(mySieveModel);

        sumberPemenuhanList = SumberPemenuhanService.SumberPemenuhans.Items;

        listItemsSumberPemenuhan = sumberPemenuhanList
        .Select(x => (dynamic)new { Id = x.Id, Value = x.Name })
        .ToList();

        isSumberPemenuhanLoaded = true;

        StateHasChanged();
    }
}
