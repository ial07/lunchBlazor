@inject PosisiService PosisiService
@inject GolonganService GolonganService
@inject DivisiService DivisiService
@inject DepartemenService DepartemenService
@inject LokasiService LokasiService

<div class="row" style="max-height: 75vh; overflow: auto; overflow-y: auto;">
    <div class="col-12">
        <div class="fw-bold">
            Informasi Man Power Planning
        </div>
        <div class="border-title"></div>
    </div>
    <div class="col-12 mt-3">
        @if (isPosisiLoaded)
        {
            <SelectComponent label="Nama Posisi" name="posisi" isBold listItems="listItemsPosisi"
                placeholder="Pilih Nama Posisi..." OnChanged="HandleInputChanged" />
        }
        else
        {
            <p>Loading...</p>
        }
    </div>
    <div class="col-6">
        @if (isGolonganLoaded)
        {
            <SelectComponent label="Golongan" name="golongan" isBold listItems="listItemsGolongan"
                placeholder="Pilih Golongan..." OnChanged="HandleInputChanged" />
        }
        else
        {
            <p>Loading...</p>
        }
    </div>
    <div class="col-6">
        <Input label="Target Pemenuhan" name="targetdate" OnInput="HandleInputChanged" bold
            placeholder="Pilih Bulan dan Tahun" type="date" />
    </div>
    <div class="col-6">
        @if (isDivisiLoaded)
        {
            <SelectComponent label="Divisi Tujuan" name="divisi" isBold listItems="listItemsDivisi"
                placeholder="Pilih Divisi..." OnChanged="HandleInputChanged" />
        }
        else
        {
            <p>Loading...</p>
        }
    </div>
    <div class="col-6">
        @if (isDepartemenLoaded)
        {
            <SelectComponent label="Departemen Tujuan" isBold listItems="listItemsDepartemen"
                placeholder="Pilih Nama Dept..." name="departemen" OnChanged="HandleInputChanged" />
        }
        else
        {
            <p>Loading...</p>
        }
    </div>
    <div class="col-12">
        @if (isLokasiLoaded)
        {
            <SelectComponent label="Lokasi Penempatan" name="lokasi" isBold listItems="listItemsLokasi"
                placeholder="Pilih Lokasi..." OnChanged="HandleInputChanged" />
        }
        else
        {
            <p>Loading...</p>
        }
    </div>
    <div class="col-6">
        <Input label="Jumlah MP Saat ini" type="number" name="jumlahmp" OnInput="HandleInputChanged" bold
            placeholder="Orang" />
    </div>
    <div class="col-6">
        <Input label="Jumlah Permintaan" type="number" name="jumlahpermintaan" OnInput="HandleInputChanged" bold
            placeholder="Orang" />
    </div>
    <div class="col-12">
        <TextArea label="Alasan Pengajuan" bold name="alasan" OnInput="HandleInputChanged" />
    </div>
    @* @if (ApplicationState.MppChildForm != null && ApplicationState.MppChildForm.AlasanPengajuan != null)
    {
    <div>@(ApplicationState.MppChildForm.AlasanPengajuan)</div>
    <div>@(ApplicationState.MppChildForm.TargetPemenuhan)</div>
    } *@
    <div class="d-flex justify-content-end mt-3">
        <Button Label="Selanjutnya" btnClass="btn-outline-info" type="button" onClick="onNextInformasi" />
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<MouseEventArgs> onNextInformasi { get; set; }
    [CascadingParameter]
    public AppState ApplicationState { get; set; }

    private async Task HandleInputChanged(SelectChangedEventArgs args)
    {
        string inputName = args.Name;
        string inputValue = args.Value;
        Console.WriteLine(inputName);
        Console.WriteLine(inputValue);

        if (inputName == "targetdate")
        {
            ApplicationState.MppChildForm.TargetPemenuhan = DateTime.Parse(inputValue);
        }
        else if (inputName == "jumlahmp")
        {
            ApplicationState.MppChildForm.JumlahMp = int.Parse(inputValue);
        }
        else if (inputName == "jumlahpermintaan")
        {
            ApplicationState.MppChildForm.JumlahPermintaan = int.Parse(inputValue);
        }
        else if (inputName == "alasan")
        {
            ApplicationState.MppChildForm.AlasanPengajuan = inputValue;
        }
        else if (inputName == "posisi")
        {
            ApplicationState.MppChildForm.PosisiId = new Guid(inputValue);
        }
        else if (inputName == "golongan")
        {
            ApplicationState.MppChildForm.GolonganId = new Guid(inputValue);
        }
        else if (inputName == "divisi")
        {
            ApplicationState.MppChildForm.DevisiTujuanId = new Guid(inputValue);
        }
        else if (inputName == "departemen")
        {
            ApplicationState.MppChildForm.DepartemenId = new Guid(inputValue);
        }
        else if (inputName == "lokasi")
        {
            ApplicationState.MppChildForm.LokasiId = new Guid(inputValue);
        }
    }


    private SieveModel mySieveModel = new SieveModel
        {
            Page = 1,
            PageSize = 5,
        };

    /// Posisi
    private List<Posisi> posisiList;
    private List<dynamic> listItemsPosisi;
    private bool isPosisiLoaded = false;

    /// Golongan
    private List<Golongan> GolonganList;
    private List<dynamic> listItemsGolongan;
    private bool isGolonganLoaded = false;

    /// Divisi
    private List<Divisi> DivisiList;
    private List<dynamic> listItemsDivisi;
    private bool isDivisiLoaded = false;

    /// Departemen
    private List<Departemen> DepartemenList;
    private List<dynamic> listItemsDepartemen;
    private bool isDepartemenLoaded = false;

    /// Lokasi
    private List<Lokasi> LokasiList;
    private List<dynamic> listItemsLokasi;
    private bool isLokasiLoaded = false;

    protected async override Task OnInitializedAsync()
    {
        await LoadPosisiAsync();
        await LoadGolonganAsync();
        await LoadDivisiAsync();
        await LoadDepartemenAsync();
        await LoadLokasiAsync();
    }

    private async Task LoadPosisiAsync()
    {
        await PosisiService.LoadPosisi(mySieveModel);

        posisiList = PosisiService.Posisies.Items;

        listItemsPosisi = posisiList
        .Select(x => (dynamic)new { Id = x.Id, Value = x.Name })
        .ToList();

        isPosisiLoaded = true;

        StateHasChanged();
    }
    private async Task LoadGolonganAsync()
    {
        await GolonganService.LoadGolongan(mySieveModel);

        GolonganList = GolonganService.Golongans.Items;

        listItemsGolongan = GolonganList
        .Select(x => (dynamic)new { Id = x.Id, Value = x.Name })
        .ToList();

        isGolonganLoaded = true;
        StateHasChanged();
    }
    private async Task LoadDivisiAsync()
    {
        await DivisiService.LoadDivisi(mySieveModel);

        DivisiList = DivisiService.Divisies.Items;

        listItemsDivisi = DivisiList
        .Select(x => (dynamic)new { Id = x.Id, Value = x.Name })
        .ToList();

        isDivisiLoaded = true;
        StateHasChanged();
    }

    private async Task LoadDepartemenAsync()
    {
        await DepartemenService.LoadDepartemen(mySieveModel);

        DepartemenList = DepartemenService.Departemens.Items;

        listItemsDepartemen = DepartemenList
        .Select(x => (dynamic)new { Id = x.Id, Value = x.Name })
        .ToList();

        isDepartemenLoaded = true;
        StateHasChanged();
    }
    private async Task LoadLokasiAsync()
    {
        await LokasiService.LoadLokasi(mySieveModel);

        LokasiList = LokasiService.Lokasies.Items;

        listItemsLokasi = LokasiList
        .Select(x => (dynamic)new { Id = x.Id, Value = x.Name })
        .ToList();

        isLokasiLoaded = true;
        StateHasChanged();
    }

}
