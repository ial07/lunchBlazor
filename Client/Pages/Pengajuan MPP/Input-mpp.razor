@page "/pengajuan-mpp/input-mpp/{pengajuan}"
@inject NavigationManager Navigation
@inject JenisMppService JenisMppService
@inject MppChildFormService MppChildFormService
@inject ILocalStorageService LocalStorage
@inject SweetAlertService Swal


<PageTitle>Pengajuan MPP</PageTitle>


<!-- start page title -->
<div class="row">
    <div class="col-12">
        <div class="page-title-box d-sm-flex align-items-center">
            <a href="/pengajuan-mpp" class="mb-sm-0 font-size-16 text-muted">Man Power Planning</a>
            <i class="bi bi-chevron-right text-primary mx-2" style="-webkit-text-stroke-width: 1px;"></i>
            <h4 class="mb-sm-0 font-size-16">Input MPP</h4>
        </div>
    </div>
</div>
<!-- end page title -->


<div class="row p-3 mt-2">
    <div class="fw-bold mb-3 font-size-16">Detail Pengajuan MPP</div>
    <div class="col-3">
        <label class="fw-bold">NRP Pemohon</label>
        <div class="ms-1">@User?.UserID</div>

    </div>
    <div class="col-3">
        <label class="fw-bold">Nama Pemohon</label>
        <div class="ms-1">@User?.UserName</div>
    </div>
    <div class="col-3">
        <label class="fw-bold">Divisi</label>
        <div class="ms-1">@User?.Division</div>
    </div>
    <div class="col-3">
        <label class="fw-bold">Lokasi</label>
        <div class="ms-1">@User?.Location</div>
    </div>
    <div class="col-3 mt-4">
        @if (isSelectMppLoaded)
        {
            <SelectComponent label="Jenis Mpp" listItems="listItemsJenisMpp" placeholder="Pilih Jenis..." />
        }
        else
        {
            <p>Loading...</p>
        }
    </div>
    <div class="col-3 mt-4">
        <div class="form-group">
            <label class="form-label">Tahun MPP</label>
            <input type="number" class="form-control" min="1900" max="2199" step="1" maxlength="4" minlength="4"
                @bind="selectedYear" oninput="@HandleYearInputChange" />
        </div>
    </div>
</div>

<div class="row">
    <div class="d-flex justify-content-between">
        <div class="fw-bold mb-3 font-size-16">Pengajuan MPP @pengajuan</div>
        <Button Label="Tambah Posisi" btnClass="btn-info" IsBtnIcon onClick="HandleButtonClickAdd" />
    </div>
    <div>
        <Table table=@table HandleClickPrevious="Previous" HandleClickNext="Next"
            HandlePageSizeChange="HandlePageSizeChange" mySieveModel="mySieveModel"
            totalCountData="MppChildFormService.MppChildForms.totalCountData" HandleEditBtn="HandleEditBtnChildForm"
            modalEditNameId="mppChildForm" HandleDeleteBtn="HandleDeleteChildForm" />
    </div>
</div>


@code {
    [Parameter]
    public string pengajuan { get; set; }
    [CascadingParameter]
    public AppState ApplicationState { get; set; }
    private MppChildForm mppChildForm = new MppChildForm();
    private Users User;
    private int selectedYear = DateTime.Now.Year;
    private void HandleYearInputChange()
    {
        if (selectedYear < 1900)
        {
            selectedYear = DateTime.Now.Year;
        }
        else if (selectedYear > 2199)
        {
            selectedYear = DateTime.Now.Year;
        }
    }
    private SieveModel mySieveModel = new SieveModel
        {
            Page = 1,
            PageSize = 5,
        };

    private TableModelViewModel table = new TableModelViewModel();
    private List<MppChildForm> listItems = new List<MppChildForm>();

    private List<JenisMpp> jenisMppList;
    private List<dynamic> listItemsJenisMpp;
    private bool isSelectMppLoaded = false;

    private async void HandleEditBtnChildForm(string id)
    {
        ApplicationState.Id = id;
        if (ApplicationState.Id is not null)
        {
            mySieveModel.Filters = $"Id=={ApplicationState.Id}";
            await MppChildFormService.GetMppChildFormById(mySieveModel);
            mppChildForm = MppChildFormService.MppChildForm;
        }
        StateHasChanged();
    }

    private async void HandleDeleteChildForm(string id)
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Are you sure to delete this item?",
                ShowCancelButton = true,
                ConfirmButtonText = "Yes!",
                Icon = "warning",
            });
        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            await MppChildFormService.DeleteMppChildForm(id);
            await LoadDataMppChildAsync(mySieveModel);
            StateHasChanged();
        }
    }

    private async Task Next()
    {
        mySieveModel.Page++;
        await LoadDataMppChildAsync(mySieveModel);
    }
    private async Task Previous()
    {
        mySieveModel.Page--;
        await LoadDataMppChildAsync(mySieveModel);
    }

    private async Task HandlePageSizeChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int selectedPageSize))
        {
            mySieveModel.Page = 1;
            mySieveModel.PageSize = selectedPageSize;
            await LoadDataMppChildAsync(mySieveModel);
        }
    }

    protected async override Task OnInitializedAsync()
    {
        await LoadDataAsync();
        await LoadDataMppChildAsync(mySieveModel);
        User = await LocalStorage.GetItemAsync<Users>("profile");
    }

    private async Task LoadDataAsync()
    {
        await JenisMppService.LoadJenisMpp(mySieveModel);

        jenisMppList = JenisMppService.JenisMpps.Items;

        listItemsJenisMpp = jenisMppList
        .Select(x => (dynamic)new { Id = x.Id, Value = x.Name })
        .ToList();

        isSelectMppLoaded = true;

        StateHasChanged();
    }

    private async Task LoadDataMppChildAsync(SieveModel sieveModel)
    {

        try
        {
            if (ApplicationState.MppForm != null && ApplicationState.MppForm.Id != null)
            {
                sieveModel.Filters = $"Id=={ApplicationState.MppForm.Id}";
                await MppChildFormService.LoadMppChildForm(sieveModel);
                listItems = MppChildFormService.MppChildForms.Items;
            }
            else
            {
                listItems = new List<MppChildForm>();
            }

            table.Data = new List<List<object>>();

            foreach (var item in listItems)
            {
                var rowData = new List<object>
{
item.Id.ToString(),
item.Id.ToString(),
    @* item.Departemen.Name, *@
    @* item.Posisi.Name, *@
item.JumlahPermintaan,
    @* item.JenisPermintaan.Name, *@
item.TargetPemenuhan
};

                table.Data.Add(rowData);
            }

            table.Headers = new List<string>
{
"ID",
"Jumlah Permintaan",
    @* "Nama Posisi",
"Jumlah",
"Jenis Pemenuhan", *@
"Target"
};
        }
        catch (Exception ex)
        {
            // Log the exception
            Console.WriteLine(ex);
            // Handle the exception as needed (e.g., show an error message to the user)
        }
        finally
        {
        }

        StateHasChanged();
    }

    private async Task HandleButtonClickAdd(MouseEventArgs e)
    {
        ApplicationState.MppChildForm = mppChildForm;
        StateHasChanged();
        ApplicationState.MppChildForm.Pengajuan = pengajuan;
        Navigation.NavigateTo("/pengajuan-mpp/tambah-posisi");
    }
}
